package com.zszd.ai.controller;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.zszd.ai.pojo.Employee;
import com.zszd.ai.pojo.SysUser;
import com.zszd.ai.service.employee.EmployeeService;
import com.zszd.ai.service.employee.EmployeeServiceImpl;
import com.zszd.ai.service.sysuser.SysUserService;
import com.zszd.ai.service.sysuser.SysUserServiceImpl;
import com.zszd.ai.tools.Constants;
import com.zszd.ai.tools.MakeMD5;

@Controller
@RequestMapping("/sys/user")
public class UserController {
	private Logger logger = Logger.getLogger(UserController.class);

	@Resource
	SysUserService sysUserService = new SysUserServiceImpl();
	
	@Resource
	EmployeeService employeeService = new EmployeeServiceImpl();
	
	// 实现跳转到修改密码页
	@RequestMapping(value = "/modifypassword.html")
	public String modifypassword() {
		return "/sysuser/user_modify";
	}

	@RequestMapping(value = "/tomodifypassword.html", method = RequestMethod.POST)
	public String modifypassword(@RequestParam String oldPassword,
			@RequestParam String newPassword, HttpSession session,
			HttpServletRequest request, HttpServletResponse response) {
		SysUser sysUser = (SysUser) session
				.getAttribute(Constants.SYSUSER_SESSION);
		if(null == oldPassword || "".equals(oldPassword)){
			request.setAttribute("error", "旧密码不能为空");
			return "/sysuser/user_modify";
		}
		if(null == newPassword || "".equals(newPassword)){
			request.setAttribute("error", "新密码不能为空");
			return "/sysuser/user_modify";
		}
		oldPassword = MakeMD5.getMD5(oldPassword); // 采用MD5算法加密
		newPassword = MakeMD5.getMD5(newPassword); // 采用MD5算法加密
		if (sysUser.getPassword().equals(oldPassword)) {
			sysUser.setPassword(newPassword);
			int row = sysUserService.updateUserPasswordInfo(sysUser);
			if (row > 0) {
				Cookie[] cookies = request.getCookies();
				if (cookies != null) {
					for (Cookie cookie : cookies) {
						if (cookie.getName().equals("name")) {
							cookie.setValue("");
							cookie.setMaxAge(0);
							response.addCookie(cookie);
						} else if (cookie.getName().equals("password")) {
							cookie.setValue("");
							cookie.setMaxAge(0);
							response.addCookie(cookie);
						}
					}
				}
				session.invalidate();
				return "login";
			}else{
				request.setAttribute("error", "密码更新失败，请联系管理员！");
				return "/sysuser/user_modify";
			}
			
		} else {
			request.setAttribute("error", "旧密码不正确");
			return "/sysuser/user_modify";
		}

	}

	@RequestMapping(value = "employeeview.html")
	public String employeeview(HttpServletRequest request) {
		List<Employee> list = employeeService.queryAllEmployeeInfo();
		request.setAttribute("list", list);
		return "employee/employee_list";
	}
	
	@RequestMapping(value = "sysUserview.html")
	public String sysUserview(HttpServletRequest request) {
		List<SysUser> list = sysUserService.queryAllSysUserInfo();
		request.setAttribute("list", list);
		return "sysuser/sysUser_list";
	}
	
	//查看个人信息
	@RequestMapping(value = "personInfo.html")
	public String personInfo(HttpServletRequest request,HttpSession session) {
		String name = ((SysUser)session.getAttribute(Constants.SYSUSER_SESSION)).getName();
		Employee employee = employeeService
				.getEmployeeInfoByLoginName(name);
		SysUser sUser = sysUserService.getUserInfoByUserName(name);
		request.setAttribute("employee", employee);
		request.setAttribute("sUser", sUser);
		return "employee/employee_info";
	}
	
	//修改后 保存个人信息
	@RequestMapping(value = "modifypersonInfo.html")
	public String modifypersonInfo(HttpSession session,HttpServletRequest request) {
		Employee employee = (Employee) session.getAttribute(Constants.EMPlOYEE_SESSION);
		employee.setWorkType(request.getParameter("workType"));
		employee.setWorkUnit(request.getParameter("workUnit"));
		employee.setWorkState(request.getParameter("workState"));
		employee.setMajor(request.getParameter("major"));
		employee.setEndSchool(request.getParameter("endSchool"));
		employee.setEducation(request.getParameter("education"));
		employee.setEndTime(request.getParameter("endTime"));
		employee.setPostalcode(request.getParameter("postalcode"));
		employee.setPhone(request.getParameter("phone"));
		employee.setAddress(request.getParameter("address"));
		employee.setIntentionalCity(request.getParameter("intentionalCity"));
		employee.setIntentionalPost(request.getParameter("intentionalPost"));
		employee.setEmail(request.getParameter("email"));
		int row = employeeService.updateAllInfo(employee);
		if (row > 0) {
			request.setAttribute("msg", "修改成功");
			session.setAttribute("employee", employee);
			return "redirect:/sys/user/personInfo.html";
		} else {
			request.setAttribute("msg", "修改失败");
			return "redirect:/sys/user/personInfo.html";
		}
	}
	

}
