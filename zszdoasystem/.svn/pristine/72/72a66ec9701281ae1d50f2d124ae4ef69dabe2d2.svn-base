package com.zszd.ai.service.department;

import java.util.List;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Service;

import com.zszd.ai.dao.department.DepartmentDao;
import com.zszd.ai.pojo.Department;
import com.zszd.ai.tools.MyBatisUtil;
@Service
public class DepartmentServiceImpl implements DepartmentService {

	@Resource
	private DepartmentDao departmentDao;
	
	
	/**
	 * 查看所有的部门 经理权限查看
	 * <p>Title queryDepartmentInfo</p>
	 * <p>Description </p>
	 * @return
	 * @see com.zszd.ai.service.department.DepartmentService#queryDepartmentInfo()
	 */
	@Override
	public List<Department> queryDepartmentInfo() {
		return departmentDao.queryDepartmentInfo();
	}
	
	@Override
	public int insertDepartment(Department department) {
		SqlSession sqlSession = null;
		int row=0;
		try{
			sqlSession = MyBatisUtil.createSqlSession();
			row = sqlSession.getMapper(DepartmentDao.class).insertDepartment(department);
			sqlSession.commit();
		}catch(Exception e){
			sqlSession.rollback();
			e.printStackTrace();
		}finally{
			MyBatisUtil.closeSqlSession(sqlSession);
		}
		
		return row;
	}

	@Override
	public int updateDepartment(Department department) {
		SqlSession sqlSession = null;
		int row=0;
		try{
			sqlSession = MyBatisUtil.createSqlSession();
			row = sqlSession.getMapper(DepartmentDao.class).updateDepartment(department);
			sqlSession.commit();
		}catch(Exception e){
			sqlSession.rollback();
			e.printStackTrace();
		}finally{
			MyBatisUtil.closeSqlSession(sqlSession);
		}
		
		return row;
	}

	@Override
	public Department queryDepartmentById(int id) {
		SqlSession sqlSession = null;
		Department department=null;
		try{
			sqlSession = MyBatisUtil.createSqlSession();
			department = sqlSession.getMapper(DepartmentDao.class).queryDepartmentById(id);
			sqlSession.commit();
		}catch(Exception e){
			sqlSession.rollback();
			e.printStackTrace();
		}finally{
			MyBatisUtil.closeSqlSession(sqlSession);
		}
		return department;
	}



	@Override
	public int countDevByDepartmentId(int departmentId) {
		SqlSession sqlSession = null;
		int count=0;
		try{
			sqlSession = MyBatisUtil.createSqlSession();
			count=sqlSession.getMapper(DepartmentDao.class).countDevByDepartmentId(departmentId);
			sqlSession.commit();
		}catch(Exception e){
			sqlSession.rollback();
			e.printStackTrace();
		}finally{
			MyBatisUtil.closeSqlSession(sqlSession);
		}
		return count;
	}

	@Override
	public int deleteDepartmentById(int id) {
		SqlSession sqlSession = null;
		int row=0;
		try{
			sqlSession = MyBatisUtil.createSqlSession();
			row=sqlSession.getMapper(DepartmentDao.class).deleteDepartmentById(id);
			sqlSession.commit();
		}catch(Exception e){
			sqlSession.rollback();
			e.printStackTrace();
		}finally{
			MyBatisUtil.closeSqlSession(sqlSession);
		}
		return row;
	}

	@Override
	public List<Department> queryDepartmentInfoByCompanyId(int companyId) {
		SqlSession sqlSession = null;
		List<Department> departmentList=null;
		try{
			sqlSession = MyBatisUtil.createSqlSession();
			departmentList = sqlSession.getMapper(DepartmentDao.class).queryDepartmentInfoByCompanyId(companyId);
			sqlSession.commit();
		}catch(Exception e){
			sqlSession.rollback();
			e.printStackTrace();
		}finally{
			MyBatisUtil.closeSqlSession(sqlSession);
		}
		return departmentList;
	}

}
